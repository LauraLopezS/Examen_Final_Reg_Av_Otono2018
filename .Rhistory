library(tidyverse)
# Funcion para cacular distancia en las variables numéricas
dist_num<-function(x){
apply(data_num, 1, function(y){sqrt(sum((x-y)^2))})
}
# Funcion para cacular distancia en las variables categoricas
dist_cat<-function(x){
apply(data_cat,1,function(y){sqrt(sum(x==y))})
}
# Funcion imputar numericos con pesos definidos por kernel gaussiano
imputar_num<-function(x,y){
aux_imput<-select(datos,var_imput)
aux_imput<-aux_imput[-indices,]
weighted.mean(aux_imput[vecinos_num[,x]],
exp(distancias_num[vecinos_num[,x],x]))
}
# Funcion imputar categoricos con pesos definidos por kernel gaussiano
imputar_cat<-function(x){
aux_imput<-select(datos,var_imput)
aux_imput<-aux_imput[-indices,]
weighted.mean(aux_imput[vecinos_cat[,x]],
exp(distancias_cat[vecinos_cat[,x],x]))
}
# Se verifica que exista la variable independiente
col<-match(var_imput,colnames(datos))
# Se extre la clase de todas las variables
clases<-lapply(datos,class)
# Se estrae el tipo de la variable a imputar
tipo<-unlist(clases[match(var_imput,names(clases))])
# Se extraen indices de los na's en la variable a imputar
indices<-which(is.na(select(datos,var_imput)))
select(datos,var_imput)
library(tidyverse)
# Funcion para cacular distancia en las variables numéricas
dist_num<-function(x){
apply(data_num, 1, function(y){sqrt(sum((x-y)^2))})
}
# Funcion para cacular distancia en las variables categoricas
dist_cat<-function(x){
apply(data_cat,1,function(y){sqrt(sum(x==y))})
}
# Funcion imputar numericos con pesos definidos por kernel gaussiano
imputar_num<-function(x,y){
aux_imput<-select(datos,var_imput)
aux_imput<-aux_imput[-indices,]
weighted.mean(aux_imput[vecinos_num[,x]],
exp(distancias_num[vecinos_num[,x],x]))
}
# Funcion imputar categoricos con pesos definidos por kernel gaussiano
imputar_cat<-function(x){
aux_imput<-select(datos,var_imput)
aux_imput<-aux_imput[-indices,]
weighted.mean(aux_imput[vecinos_cat[,x]],
exp(distancias_cat[vecinos_cat[,x],x]))
}
# Se verifica que exista la variable independiente
col<-match(var_imput,colnames(datos))
# Se extre la clase de todas las variables
clases<-lapply(datos,class)
# Se estrae el tipo de la variable a imputar
tipo<-unlist(clases[match(var_imput,names(clases))])
# Se extraen indices de los na's en la variable a imputar
indices<-which(is.na(select(datos,var_imput)))
var_imput<-'Sepal.Length'
# Se extraen indices de los na's en la variable a imputar
indices<-which(is.na(select(datos,var_imput)))
# Se separan datos numéricos y se escalan
datos_num<-datos%>%
select(names(clases)[which(clases %in% c('numeric','integer'))])%>%
scale()%>%
as.data.frame()
# Se separan datos categóricos y se escalan
datos_cat<-datos%>%
select(names(clases)[which(clases=='factor')])%>%
as.data.frame()
# Se elimina la variable a imputar de los datos separados.
if(tipo %in% c('numeric','integer')){
datos_num<-datos_num%>%
select(-var_imput)
}else{
datos_cat<-datos_cat%>%
select(-var_imput)
}
# Se eliminan las observaciones con na's en la variable a imputar.
data_num<-datos_num[-indices,]%>%
as.data.frame()
names(data_num)<-names(datos_num)
data_cat<-datos_cat[-indices,]%>%
as.data.frame()
names(data_cat)<-names(datos_cat)
# Se almacenan los renglones con NA's
data_num_na<-datos_num[indices,]%>%
as.data.frame()
names(data_num_na)<-names(datos_num)
data_cat_na<-datos_cat[indices,]%>%
as.data.frame()
names(data_cat_na)<-names(datos_cat)
# Se calcula la distancia para variables numéricas
distancias_num<-apply(data_num_na,1,dist_num)
colnames(distancias_num)<-indices
rownames(distancias_num)<-rownames(data_num)
# Se calcula la distancia para variables categoricas
distancias_cat<-apply(data_cat_na,1,dist_cat)
colnames(distancias_cat)<-indices
rownames(distancias_cat)<-rownames(data_cat)
# Se obtiene el promedio de las variables faltantes para los k vecinos
vecinos_num<-apply(distancias_num,2,function(x){as.numeric(as.character(names(sort(x))[1:5]))})
vecinos_cat<-apply(distancias_cat,2,function(x){as.numeric(as.character(names(sort(x))[1:5]))})
# Se imputan datos con variables numericas
imputados_num<-unlist(lapply(1:length(indices),imputar_num))
# Se imputan datos con variables categóricas
imputados_cat<-unlist(lapply(1:length(indices),imputar_cat))
# Se pondera el valor imputado con datos numericos y con datos categóricos
imputados<-(ncol(datos_num)/(ncol(datos)-1))*imputados_num+(ncol(datos_cat)/(ncol(datos)-1))*imputados_cat
# output de la función
data.frame(Indice=indices,
ValorImput=imputados,
row.names =NULL)
datos<-iris
datos$Sepal.Length[c(1,50,100,150)]<-NA
var_imput<-'Sepal.Length'
num_vecinos<-5
library(tidyverse)
# Funcion para cacular distancia en las variables numéricas
dist_num<-function(x){
apply(data_num, 1, function(y){sqrt(sum((x-y)^2))})
}
# Funcion para cacular distancia en las variables categoricas
dist_cat<-function(x){
apply(data_cat,1,function(y){sqrt(sum(x==y))})
}
# Funcion imputar numericos con pesos definidos por kernel gaussiano
imputar_num<-function(x,y){
aux_imput<-select(datos,var_imput)
aux_imput<-aux_imput[-indices,]
weighted.mean(aux_imput[vecinos_num[,x]],
exp(distancias_num[vecinos_num[,x],x]))
}
# Funcion imputar categoricos con pesos definidos por kernel gaussiano
imputar_cat<-function(x){
aux_imput<-select(datos,var_imput)
aux_imput<-aux_imput[-indices,]
weighted.mean(aux_imput[vecinos_cat[,x]],
exp(distancias_cat[vecinos_cat[,x],x]))
}
# Se verifica que exista la variable independiente
col<-match(var_imput,colnames(datos))
length(which(is.na(col)))>0
# Se extre la clase de todas las variables
clases<-lapply(datos,class)
# Se estrae el tipo de la variable a imputar
tipo<-unlist(clases[match(var_imput,names(clases))])
# Se extraen indices de los na's en la variable a imputar
indices<-which(is.na(select(datos,var_imput)))
# Se separan datos numéricos y se escalan
datos_num<-datos%>%
select(names(clases)[which(clases %in% c('numeric','integer'))])%>%
scale()%>%
as.data.frame()
# Se separan datos categóricos y se escalan
datos_cat<-datos%>%
select(names(clases)[which(clases=='factor')])%>%
as.data.frame()
# Se elimina la variable a imputar de los datos separados.
if(tipo %in% c('numeric','integer')){
datos_num<-datos_num%>%
select(-var_imput)
}else{
datos_cat<-datos_cat%>%
select(-var_imput)
}
# Se eliminan las observaciones con na's en la variable a imputar.
data_num<-datos_num[-indices,]%>%
as.data.frame()
names(data_num)<-names(datos_num)
data_cat<-datos_cat[-indices,]%>%
as.data.frame()
names(data_cat)<-names(datos_cat)
# Se almacenan los renglones con NA's
data_num_na<-datos_num[indices,]%>%
as.data.frame()
names(data_num_na)<-names(datos_num)
data_cat_na<-datos_cat[indices,]%>%
as.data.frame()
names(data_cat_na)<-names(datos_cat)
# Se calcula la distancia para variables numéricas
distancias_num<-apply(data_num_na,1,dist_num)
colnames(distancias_num)<-indices
rownames(distancias_num)<-rownames(data_num)
# Se calcula la distancia para variables categoricas
distancias_cat<-apply(data_cat_na,1,dist_cat)
colnames(distancias_cat)<-indices
rownames(distancias_cat)<-rownames(data_cat)
# Se obtiene el promedio de las variables faltantes para los k vecinos
vecinos_num<-apply(distancias_num,2,function(x){as.numeric(as.character(names(sort(x))[1:5]))})
vecinos_cat<-apply(distancias_cat,2,function(x){as.numeric(as.character(names(sort(x))[1:5]))})
vecinos_num
vecinos_cat
# Se imputan datos con variables numericas
imputados_num<-unlist(lapply(1:length(indices),imputar_num))
1:length(indices)
# Funcion imputar numericos con pesos definidos por kernel gaussiano
imputar_num<-function(x){
aux_imput<-select(datos,var_imput)
aux_imput<-aux_imput[-indices,]
weighted.mean(aux_imput[vecinos_num[,x]],
exp(distancias_num[vecinos_num[,x],x]))
}
# Se imputan datos con variables numericas
imputados_num<-unlist(lapply(1:length(indices),imputar_num))
x<-1
aux_imput<-select(datos,var_imput)
aux_imput<-aux_imput[-indices,]
aux_imput[vecinos_num[,x]]
vecinos_num[,x]
distancias_num[vecinos_num[,x],x]
head(distancias_num)
head(distancias_num,20)
head(distancias_num,18)
head(distancias_num,20)
distancias_num[18,]
library(tidyverse)
# Funcion para cacular distancia en las variables numéricas
dist_num<-function(x){
apply(data_num, 1, function(y){sqrt(sum((x-y)^2))})
}
# Funcion para cacular distancia en las variables categoricas
dist_cat<-function(x){
apply(data_cat,1,function(y){sqrt(sum(x==y))})
}
# Funcion imputar numericos con pesos definidos por kernel gaussiano
imputar_num<-function(x){
aux_imput<-select(datos,var_imput)
aux_imput<-aux_imput[-indices,]
weighted.mean(aux_imput[vecinos_num[,x]],
exp(distancias_num[vecinos_num[,x],x]))
}
# Funcion imputar categoricos con pesos definidos por kernel gaussiano
imputar_cat<-function(x){
aux_imput<-select(datos,var_imput)
aux_imput<-aux_imput[-indices,]
weighted.mean(aux_imput[vecinos_cat[,x]],
exp(distancias_cat[vecinos_cat[,x],x]))
}
# Se verifica que exista la variable independiente
col<-match(var_imput,colnames(datos))
# Se extre la clase de todas las variables
clases<-lapply(datos,class)
# Se estrae el tipo de la variable a imputar
tipo<-unlist(clases[match(var_imput,names(clases))])
# Se extraen indices de los na's en la variable a imputar
indices<-which(is.na(select(datos,var_imput)))
indices
# Se separan datos numéricos y se escalan
datos_num<-datos%>%
select(names(clases)[which(clases %in% c('numeric','integer'))])%>%
scale()%>%
as.data.frame()
# Se separan datos categóricos y se escalan
datos_cat<-datos%>%
select(names(clases)[which(clases=='factor')])%>%
as.data.frame()
# Se elimina la variable a imputar de los datos separados.
if(tipo %in% c('numeric','integer')){
datos_num<-datos_num%>%
select(-var_imput)
}else{
datos_cat<-datos_cat%>%
select(-var_imput)
}
# Se eliminan las observaciones con na's en la variable a imputar.
data_num<-datos_num[-indices,]%>%
as.data.frame()
rownames(data_num)
imputar_por_similitud <- function(datos, var_imput, num_vecinos=0.1*nrow(datos)) {
library(tidyverse)
# Funcion para cacular distancia en las variables numéricas
dist_num<-function(x){
apply(data_num, 1, function(y){sqrt(sum((x-y)^2))})
}
# Funcion para cacular distancia en las variables categoricas
dist_cat<-function(x){
apply(data_cat,1,function(y){sqrt(sum(x==y))})
}
# Funcion imputar numericos con pesos definidos por kernel gaussiano
imputar_num<-function(x){
aux_imput<-select(datos,var_imput)
aux_imput<-aux_imput[-indices,]
weighted.mean(aux_imput[vecinos_num[,x]],
exp(distancias_num[vecinos_num[,x],x]))
}
# Funcion imputar categoricos con pesos definidos por kernel gaussiano
imputar_cat<-function(x){
aux_imput<-select(datos,var_imput)
aux_imput<-aux_imput[-indices,]
weighted.mean(aux_imput[vecinos_cat[,x]],
exp(distancias_cat[vecinos_cat[,x],x]))
}
# Se verifica que exista la variable independiente
col<-match(var_imput,colnames(datos))
if(length(which(is.na(col)))>0){
stop(paste('Error: la variable a imputar no existe.'))
}else{
# Se extre la clase de todas las variables
clases<-lapply(datos,class)
# Se estrae el tipo de la variable a imputar
tipo<-unlist(clases[match(var_imput,names(clases))])
# Se extraen indices de los na's en la variable a imputar
indices<-which(is.na(select(datos,var_imput)))
# Se separan datos numéricos y se escalan
datos_num<-datos%>%
select(names(clases)[which(clases %in% c('numeric','integer'))])%>%
scale()%>%
as.data.frame()
# Se separan datos categóricos y se escalan
datos_cat<-datos%>%
select(names(clases)[which(clases=='factor')])%>%
as.data.frame()
# Se elimina la variable a imputar de los datos separados.
if(tipo %in% c('numeric','integer')){
datos_num<-datos_num%>%
select(-var_imput)
}else{
datos_cat<-datos_cat%>%
select(-var_imput)
}
# Se eliminan las observaciones con na's en la variable a imputar.
data_num<-datos_num[-indices,]%>%
as.data.frame()
names(data_num)<-names(datos_num)
rownames(data_num)<-1:nrow(data_num)
data_cat<-datos_cat[-indices,]%>%
as.data.frame()
names(data_cat)<-names(datos_cat)
rownames(data_cat)<-1:nrow(data_cat)
# Se almacenan los renglones con NA's
data_num_na<-datos_num[indices,]%>%
as.data.frame()
names(data_num_na)<-names(datos_num)
rownames(data_num_na)<-1:nrow(data_num_na)
data_cat_na<-datos_cat[indices,]%>%
as.data.frame()
names(data_cat_na)<-names(datos_cat)
rownames(data_num_na)<-1:nrow(data_num_na)
# Se calcula la distancia para variables numéricas
distancias_num<-apply(data_num_na,1,dist_num)
colnames(distancias_num)<-indices
rownames(distancias_num)<-rownames(data_num)
# Se calcula la distancia para variables categoricas
distancias_cat<-apply(data_cat_na,1,dist_cat)
colnames(distancias_cat)<-indices
rownames(distancias_cat)<-rownames(data_cat)
# Se obtiene el promedio de las variables faltantes para los k vecinos
vecinos_num<-apply(distancias_num,2,function(x){as.numeric(as.character(names(sort(x))[1:5]))})
vecinos_cat<-apply(distancias_cat,2,function(x){as.numeric(as.character(names(sort(x))[1:5]))})
# Se imputan datos con variables numericas
imputados_num<-unlist(lapply(1:length(indices),imputar_num))
# Se imputan datos con variables categóricas
imputados_cat<-unlist(lapply(1:length(indices),imputar_cat))
# Se pondera el valor imputado con datos numericos y con datos categóricos
imputados<-(ncol(datos_num)/(ncol(datos)-1))*imputados_num+(ncol(datos_cat)/(ncol(datos)-1))*imputados_cat
# output de la función
data.frame(Indice=indices,
ValorImput=imputados,
row.names =NULL)
}
}
imputar_por_similitud(datos,var_imput)
knitr::opts_chunk$set(echo = FALSE)
# setwd("~/Documents/ITAM_Maestria/03_Otono_2018/01_Regresion_Avanzda/05 Proyecto Final")
setwd("//client/E$/ITAM_Maestria/03_Otono_2018/01_Regresion_Avanzada/05_Proyecto_Final")
knitr::opts_chunk$set(echo = FALSE)
# setwd("~/Documents/ITAM_Maestria/03_Otono_2018/01_Regresion_Avanzda/05 Proyecto Final")
setwd("//client/E$/ITAM_Maestria/03_Otono_2018/01_Regresion_Avanzada/05_Proyecto_Final")
knitr::opts_chunk$set(echo = FALSE)
# Ruta ALE
setwd("~/Documents/ITAM_Maestria/03_Otono_2018/01_Regresion_Avanzda/05 Proyecto Final")
setwd("~/Documents/ITAM_Maestria/03_Otono_2018/01_Regresion_Avanzda/05_Proyecto_Final")
# Ruta ALE
setwd("~/Documents/ITAM_Maestria/03_Otono_2018/01_Regresion_Avanzda/05_Proyecto_Final")
knitr::opts_chunk$set(echo = FALSE)
# Ruta ALE
setwd("~/Documents/ITAM_Maestria/03_Otono_2018/01_Regresion_Avanzda/05_Proyecto_Final")
# Ruta Banxico
# setwd("//client/E$/ITAM_Maestria/03_Otono_2018/01_Regresion_Avanzada/05_Proyecto_Final")
# Ruta Laura
# Ruta Dante
knitr::opts_chunk$set(echo = FALSE)
# Ruta ALE
setwd("~/Documents/ITAM_Maestria/03_Otono_2018/01_Regresion_Avanzda/05_Proyecto_Final")
# Ruta Banxico
# setwd("//client/E$/ITAM_Maestria/03_Otono_2018/01_Regresion_Avanzada/05_Proyecto_Final")
# Ruta Laura
# Ruta Dante
# Cargamos librerias
library(R2jags)
library(tidyverse)
library(gridExtra)
library(xtable) # para edición de tablas
library(pastecs)#para analisis descriptivo de datos
# Gráfica de series de tiempo
plot_ts<-function(datos,Fechas){
output<-function(var,color,var.name,unidades){
par(mar=c(5.1,2.1,3.1,2.1))
nobs<-nrow(datos)
col<-match(var,colnames(datos))
y<-unlist(datos[,col])
xmin<-1
xmax<-nobs
ymin<-min(y,na.rm=TRUE)
ymax<-max(y,na.rm=TRUE)
plot(1:nobs,y,type="l",lwd=2,lty=1,col=color,
xaxt='n',ylim=c(ymin,ymax),xlim=c(xmin,xmax),
xlab='',ylab=var.name,
main=var.name)
mtext(paste("(",unidades,")",sep=''), side=3,line=0,cex=0.8)
axis(1,at=seq(1,nobs,6),labels=Fechas[seq(1,nobs,6)],las=2)
abline(h=seq(ymin,ymax,ceiling((ymax-ymin)/10)),lty=2,lwd=1,col='gray50')
}
output
}
# Probabilidad
prob<-function(x){
out<-min(length(x[x>0])/length(x),length(x[x<0])/length(x))
out
}
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Grafica de regresores vs WTI
plot_RegvsWTI<-function(x.name,out.yp,pos_leg){
col_reg<-match(x.name,colnames(datos_train))
x<-unlist(datos_train[,col_reg])
y<-datos_train$WTI
x.name<-case_when(x.name=='JPM_Dollar_Index.name'~'JPM Dollar Index.name',
x.name=='VIx.name_Index.name'~'VIx.name Index.name',
x.name=='OPEP_TOTPROD'~'Prod. OPEP',
x.name=='OPEP_TOTDEM'~'Dem. OPEP',
x.name=='TBILL_10YR'~'TBILL-10YR',
x.name=='TBILL_1YR'~'TBILL-1YR')
ymin<-min(y,out.yp[,c(1,3,7)])
ymax<-max(y,out.yp[,c(1,3,7)])
xmin<-min(x)
xmax<-max(x)
plot(x,y,type="p",pch=16,col="grey50",ylim=c(ymin,ymax),
main=paste(x.name," vs WTI"),xlab=x.name,ylab='WTI')
points(x,out.yp[,1],col='firebrick1',pch=16,cex=0.8)
segments(x,out.yp[,3],x,out.yp[,7],col=2)
legend(pos_leg,legend=c('Observado','Ajustado'),pch=16,col=c('grey50','firebrick1'))
}
# Gráfica de ajuste y pronóstico WTI
plot_tsWTI<-function(out.yp,out.yf,pos_leg){
xmin<-1
xmax<-n+m
ymin<-min(c(datos$WTI,out.yp[,1],out.yf[,1]))
ymax<-max(c(datos$WTI,out.yp[,1],out.yf[,1]))
plot(1:(n+m),datos$WTI,type="l",lwd=2,col="grey80",xaxt='n',ylim=c(ymin,ymax),xlim=c(xmin,xmax),xlab='',ylab='WTI')
lines(1:(n+m),c(out.yp[,1],out.yf[1,1],rep(NA,m-1)),lty=2,col='firebrick1')
lines(1:(n+m),c(rep(NA,n-1),out.yp[n,1],out.yf[,1]),lty=1,lwd=2,col='royalblue1')
axis(1,at=seq(1,n+m,6),labels=Fecha[seq(1,n+m,6)],las=2)
legend(pos_leg,legend=c('Observado','Ajustado','Pronosticado'),lty=c(1,2,1),lwd=c(2,1,2),col=c('grey50','firebrick1','royalblue1'))
}
# Gráfica de serire de tiempo de coeficients
plot_beta<-function(out.beta){
plotfun<-function (x){
name.y<-case_when(x==1~'JPM Dollar Index',
x==2~'VIX Index',
x==3~'Prod. OPEP',
x==4~'Dem. OPEP',
x==5~'TBILL-10YR',
x==6~'TBILL-1YR')
ymin<-min(out.beta[seq(x,nrow(out.beta),k),c(1,3,7)])
ymax<-max(out.beta[seq(x,nrow(out.beta),k),c(1,3,7)])
xmin<-1
xmax<-n
plot(out.beta[seq(x,nrow(out.beta),k),1],
type="l",lty=1,lwd=2,col='firebrick1',
ylim=c(ymin,ymax),xlim=c(xmin,xmax),xaxt='n',
xlab='',ylab=name.y,
main=paste('Serie de tiempo del coeficiente estimado para ', name.y,sep=""))
lines(out.beta[seq(x,nrow(out.beta),k),3],lty=2,lwd=2,col='gray50')
lines(out.beta[seq(x,nrow(out.beta),k),7],lty=2,lwd=2,col='gray50')
axis(1,at=seq(1,n,6),labels=Fecha[seq(1,n,6)],las=2)
legend('topright',legend=c('Media','Banda Conf. 95%'),lty=c(1,2),lwd=2,col=c('firebrick1','gray50'))
}
plotfun
}
source('01_Clean_Data_Petroleo.R')
# Seleccioanmos el set de datos a usar
datos<-datos_1
# Extraemos las fechas
Fecha<-datos$Fecha
# Eliminamos la fecha de los datos
datos <- select(datos, -Fecha)
# Función para graficar con estos datos.
plot_ts_datos<-plot_ts(datos,Fecha)
# WTI
plot_ts_datos('WTI','firebrick1','West Texas Intermediate','Dólares por barril')
par(mfrow=c(3,2))
# JPM_Dollar_Index
plot_ts_datos('JPM_Dollar_Index','royalblue1','JPM Dollar Index','Unidades')
# VIX_Index
plot_ts_datos('VIX_Index','darkgoldenrod1','VIX','Unidades')
# OPEP_TOTPROD
plot_ts_datos('OPEP_TOTPROD','olivedrab','Producción de la OPEP','Millones de barriles')
# OPEP_TOTDEM
plot_ts_datos('OPEP_TOTDEM','lightblue1','Demanda de la OPEP','Millones de barriles')
# JPM_Dollar_Index
plot_ts_datos('TBILL_10YR','coral','Tasa Largo Plazo EU','Porciento')
# JPM_Dollar_Index
plot_ts_datos('TBILL_1YR','mediumpurple1','Tasa Corto Plazo EU','Porciento')
